package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.Limiter -o ./mocks/limiter_minimock.go -n LimiterMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LimiterMock implements domain.Limiter
type LimiterMock struct {
	t minimock.Tester

	funcWait          func(ctx context.Context) (err error)
	inspectFuncWait   func(ctx context.Context)
	afterWaitCounter  uint64
	beforeWaitCounter uint64
	WaitMock          mLimiterMockWait
}

// NewLimiterMock returns a mock for domain.Limiter
func NewLimiterMock(t minimock.Tester) *LimiterMock {
	m := &LimiterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WaitMock = mLimiterMockWait{mock: m}
	m.WaitMock.callArgs = []*LimiterMockWaitParams{}

	return m
}

type mLimiterMockWait struct {
	mock               *LimiterMock
	defaultExpectation *LimiterMockWaitExpectation
	expectations       []*LimiterMockWaitExpectation

	callArgs []*LimiterMockWaitParams
	mutex    sync.RWMutex
}

// LimiterMockWaitExpectation specifies expectation struct of the Limiter.Wait
type LimiterMockWaitExpectation struct {
	mock    *LimiterMock
	params  *LimiterMockWaitParams
	results *LimiterMockWaitResults
	Counter uint64
}

// LimiterMockWaitParams contains parameters of the Limiter.Wait
type LimiterMockWaitParams struct {
	ctx context.Context
}

// LimiterMockWaitResults contains results of the Limiter.Wait
type LimiterMockWaitResults struct {
	err error
}

// Expect sets up expected params for Limiter.Wait
func (mmWait *mLimiterMockWait) Expect(ctx context.Context) *mLimiterMockWait {
	if mmWait.mock.funcWait != nil {
		mmWait.mock.t.Fatalf("LimiterMock.Wait mock is already set by Set")
	}

	if mmWait.defaultExpectation == nil {
		mmWait.defaultExpectation = &LimiterMockWaitExpectation{}
	}

	mmWait.defaultExpectation.params = &LimiterMockWaitParams{ctx}
	for _, e := range mmWait.expectations {
		if minimock.Equal(e.params, mmWait.defaultExpectation.params) {
			mmWait.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWait.defaultExpectation.params)
		}
	}

	return mmWait
}

// Inspect accepts an inspector function that has same arguments as the Limiter.Wait
func (mmWait *mLimiterMockWait) Inspect(f func(ctx context.Context)) *mLimiterMockWait {
	if mmWait.mock.inspectFuncWait != nil {
		mmWait.mock.t.Fatalf("Inspect function is already set for LimiterMock.Wait")
	}

	mmWait.mock.inspectFuncWait = f

	return mmWait
}

// Return sets up results that will be returned by Limiter.Wait
func (mmWait *mLimiterMockWait) Return(err error) *LimiterMock {
	if mmWait.mock.funcWait != nil {
		mmWait.mock.t.Fatalf("LimiterMock.Wait mock is already set by Set")
	}

	if mmWait.defaultExpectation == nil {
		mmWait.defaultExpectation = &LimiterMockWaitExpectation{mock: mmWait.mock}
	}
	mmWait.defaultExpectation.results = &LimiterMockWaitResults{err}
	return mmWait.mock
}

// Set uses given function f to mock the Limiter.Wait method
func (mmWait *mLimiterMockWait) Set(f func(ctx context.Context) (err error)) *LimiterMock {
	if mmWait.defaultExpectation != nil {
		mmWait.mock.t.Fatalf("Default expectation is already set for the Limiter.Wait method")
	}

	if len(mmWait.expectations) > 0 {
		mmWait.mock.t.Fatalf("Some expectations are already set for the Limiter.Wait method")
	}

	mmWait.mock.funcWait = f
	return mmWait.mock
}

// When sets expectation for the Limiter.Wait which will trigger the result defined by the following
// Then helper
func (mmWait *mLimiterMockWait) When(ctx context.Context) *LimiterMockWaitExpectation {
	if mmWait.mock.funcWait != nil {
		mmWait.mock.t.Fatalf("LimiterMock.Wait mock is already set by Set")
	}

	expectation := &LimiterMockWaitExpectation{
		mock:   mmWait.mock,
		params: &LimiterMockWaitParams{ctx},
	}
	mmWait.expectations = append(mmWait.expectations, expectation)
	return expectation
}

// Then sets up Limiter.Wait return parameters for the expectation previously defined by the When method
func (e *LimiterMockWaitExpectation) Then(err error) *LimiterMock {
	e.results = &LimiterMockWaitResults{err}
	return e.mock
}

// Wait implements domain.Limiter
func (mmWait *LimiterMock) Wait(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmWait.beforeWaitCounter, 1)
	defer mm_atomic.AddUint64(&mmWait.afterWaitCounter, 1)

	if mmWait.inspectFuncWait != nil {
		mmWait.inspectFuncWait(ctx)
	}

	mm_params := &LimiterMockWaitParams{ctx}

	// Record call args
	mmWait.WaitMock.mutex.Lock()
	mmWait.WaitMock.callArgs = append(mmWait.WaitMock.callArgs, mm_params)
	mmWait.WaitMock.mutex.Unlock()

	for _, e := range mmWait.WaitMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWait.WaitMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWait.WaitMock.defaultExpectation.Counter, 1)
		mm_want := mmWait.WaitMock.defaultExpectation.params
		mm_got := LimiterMockWaitParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWait.t.Errorf("LimiterMock.Wait got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWait.WaitMock.defaultExpectation.results
		if mm_results == nil {
			mmWait.t.Fatal("No results are set for the LimiterMock.Wait")
		}
		return (*mm_results).err
	}
	if mmWait.funcWait != nil {
		return mmWait.funcWait(ctx)
	}
	mmWait.t.Fatalf("Unexpected call to LimiterMock.Wait. %v", ctx)
	return
}

// WaitAfterCounter returns a count of finished LimiterMock.Wait invocations
func (mmWait *LimiterMock) WaitAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWait.afterWaitCounter)
}

// WaitBeforeCounter returns a count of LimiterMock.Wait invocations
func (mmWait *LimiterMock) WaitBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWait.beforeWaitCounter)
}

// Calls returns a list of arguments used in each call to LimiterMock.Wait.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWait *mLimiterMockWait) Calls() []*LimiterMockWaitParams {
	mmWait.mutex.RLock()

	argCopy := make([]*LimiterMockWaitParams, len(mmWait.callArgs))
	copy(argCopy, mmWait.callArgs)

	mmWait.mutex.RUnlock()

	return argCopy
}

// MinimockWaitDone returns true if the count of the Wait invocations corresponds
// the number of defined expectations
func (m *LimiterMock) MinimockWaitDone() bool {
	for _, e := range m.WaitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WaitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWaitCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWait != nil && mm_atomic.LoadUint64(&m.afterWaitCounter) < 1 {
		return false
	}
	return true
}

// MinimockWaitInspect logs each unmet expectation
func (m *LimiterMock) MinimockWaitInspect() {
	for _, e := range m.WaitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LimiterMock.Wait with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WaitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWaitCounter) < 1 {
		if m.WaitMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LimiterMock.Wait")
		} else {
			m.t.Errorf("Expected call to LimiterMock.Wait with params: %#v", *m.WaitMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWait != nil && mm_atomic.LoadUint64(&m.afterWaitCounter) < 1 {
		m.t.Error("Expected call to LimiterMock.Wait")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LimiterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockWaitInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LimiterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LimiterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWaitDone()
}
